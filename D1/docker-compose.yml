version: '3.8'

networks:
  bigdata-network:
    driver: bridge

volumes:
  # Ticketing
  glpi_db_data:
  glpi_files:
  # Historisation (ELK)
  es_data:
  # Datalake
  cassandra_data:
  # Monitoring
  prometheus_data:
  grafana_data:

services:
  # ============================== SECURITY & PROXY ==============================
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443 # Prêt pour le SSL (non configuré ici pour la simplicité)
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - bigdata-network
    labels:
      # Exposer le dashboard Traefik
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"

  # ============================== TICKETING (GLPI) ==============================
  glpi-db:
    image: mariadb:10.11
    container_name: glpi-db
    environment:
      - MARIADB_ROOT_PASSWORD=glpi_root_secret
      - MARIADB_DATABASE=glpidb
      - MARIADB_USER=glpiuser
      - MARIADB_PASSWORD=glpi_secret
    volumes:
      - glpi_db_data:/var/lib/mysql
    networks:
      - bigdata-network
    restart: always

  glpi-web:
    image: glpi/glpi:latest
    container_name: glpi-web
    depends_on:
      - glpi-db
    environment:
      - GLPI_DEBUG=false
      - GLPI_DATABASE_HOST=glpi-db:3306
      - GLPI_DATABASE_NAME=glpidb
      - GLPI_DATABASE_USER=glpiuser
      - GLPI_DATABASE_PASSWORD=glpi_secret
    volumes:
      - glpi_files:/var/www/html
    networks:
      - bigdata-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glpi.rule=Host(`glpi.localhost`)"
      - "traefik.http.services.glpi.loadbalancer.server.port=80"
    restart: always

  # ============================== DATALAKE (CASSANDRA Cluster 3 Nœuds) ==============================
  cassandra1:
    image: cassandra:4.1
    container_name: cassandra1
    hostname: cassandra1
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_DC=datacenter1
    volumes:
      - cassandra_data:/var/lib/cassandra
    networks:
      - bigdata-network
    restart: always

  cassandra2:
    image: cassandra:4.1
    container_name: cassandra2
    hostname: cassandra2
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_DC=datacenter1
    depends_on:
      - cassandra1
    networks:
      - bigdata-network
    restart: always

  cassandra3:
    image: cassandra:4.1
    container_name: cassandra3
    hostname: cassandra3
    environment:
      - CASSANDRA_SEEDS=cassandra1,cassandra2
      - CASSANDRA_CLUSTER_NAME=BigDataCluster
      - CASSANDRA_DC=datacenter1
    depends_on:
      - cassandra1
    networks:
      - bigdata-network
    restart: always

  # ============================== HISTORISATION (ELK Stack) ==============================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      # Single-node configuration for simplicity, for HA use 'discovery.type=multi-node' and add more nodes
      - discovery.type=single-node
      - xpack.security.enabled=false # Désactiver la sécurité pour la simplicité
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - bigdata-network
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - bigdata-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.localhost`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    restart: always

  # ============================== MONITORING (Prometheus & Grafana) ==============================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.html=/usr/share/prometheus/consoles'
      - '--web.external-url=http://prometheus.localhost/' # Important pour Traefik
    networks:
      - bigdata-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=strongpassword
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus
      - elasticsearch
    networks:
      - bigdata-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    restart: always